import os
import logging
import asyncio
import re
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from database import Database, Driver, Queue
from sqlalchemy import select, delete, update

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_PASSWORD = os.getenv('ADMIN_PASSWORD')
GROUP_ID = os.getenv('GROUP_ID')  # ID –≥—Ä—É–ø–ø—ã, –≥–¥–µ –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –∑–∞–∫–∞–∑—ã

# Initialize database
db = Database()

# Command handlers
async def get_main_menu(user_id: int):
    """Get main menu keyboard based on user state"""
    is_registered = await db.is_driver_registered(user_id)
    is_in_queue = await db.is_driver_in_queue(user_id)
    
    keyboard = []
    
    if not is_registered:
        keyboard.append([InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")])
    else:
        if not is_in_queue:
            keyboard.append([InlineKeyboardButton("üëâ –í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å", callback_data="join_queue")])
        else:
            keyboard.append([InlineKeyboardButton("üîÅ –û—Ç–±–∏—Ç—å—Å—è", callback_data="leave_queue")])
        keyboard.append([InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")])
    
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start command handler"""
    logger.info(f"Start command received from user {update.effective_user.id}")
    reply_markup = await get_main_menu(update.effective_user.id)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ —Ç–∞–∫—Å–∏!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Help command handler"""
    logger.info(f"Help command received from user {update.effective_user.id}")
    help_text = (
        "üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/admin [–ø–∞—Ä–æ–ª—å] - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "üöñ –î–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π:\n"
        "1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
        "2. –í—Å—Ç–∞–Ω—å—Ç–µ –≤ –æ—á–µ—Ä–µ–¥—å, –∫–æ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã\n"
        "3. –ù–∞–∂–º–∏—Ç–µ ¬´–û—Ç–±–∏—Ç—å—Å—è¬ª –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞\n\n"
        "‚ùì –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
    )
    await update.message.reply_text(help_text)

async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Admin command handler"""
    logger.info(f"Admin command received from user {update.effective_user.id}")
    
    if not context.args:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
        
    if context.args[0] != ADMIN_PASSWORD:
        logger.warning(f"Invalid admin password attempt from user {update.effective_user.id}")
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π", callback_data="admin_drivers_list")],
        [InlineKeyboardButton("üë• –¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å", callback_data="admin_queue_list")],
        [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data="admin_reset_queue")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è", callback_data="admin_delete_driver")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def register_driver(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start registration process"""
    query = update.callback_query
    user_id = query.from_user.id
    
    # Check if already registered
    if await db.is_driver_registered(user_id):
        await query.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        await update_menu_message(query.message, user_id)
        return
    
    context.user_data['registration_step'] = 'name'
    await query.message.reply_text(
        "–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )

async def handle_registration_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle registration process inputs"""
    if not context.user_data.get('registration_step'):
        # If no registration in progress, ignore the message
        return
        
    step = context.user_data.get('registration_step')
    
    if step == 'name':
        context.user_data['driver_name'] = update.message.text
        context.user_data['registration_step'] = 'car_model'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    
    elif step == 'car_model':
        context.user_data['car_model'] = update.message.text
        context.user_data['registration_step'] = 'car_number'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    
    elif step == 'car_number':
        # Save driver to database
        driver_data = {
            'telegram_id': update.message.from_user.id,
            'name': context.user_data['driver_name'],
            'car_model': context.user_data['car_model'],
            'car_number': update.message.text,
            'status': 'inactive'
        }
        await db.add_driver(driver_data)
        
        # Clear registration data
        context.user_data.clear()
        
        # Send success message with updated menu
        reply_markup = await get_main_menu(update.message.from_user.id)
        await update.message.reply_text(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤.",
            reply_markup=reply_markup
        )

async def join_queue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Add driver to the queue"""
    query = update.callback_query
    driver_id = query.from_user.id
    
    try:
        if not await db.is_driver_registered(driver_id):
            await query.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
                show_alert=True
            )
            return

        if await db.is_driver_in_queue(driver_id):
            position = await db.get_queue_position(driver_id)
            await query.answer(
                f"‚ùó –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏ (–ø–æ–∑–∏—Ü–∏—è: {position})",
                show_alert=True
            )
            return

        if await db.add_to_queue(driver_id):
            position = await db.get_queue_position(driver_id)
            await query.answer(
                f"‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å! –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: {position}",
                show_alert=True
            )
            await update_menu_message(query.message, driver_id)
        else:
            await query.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å",
                show_alert=True
            )
    except Exception as e:
        logger.error(f"Error in join_queue: {e}")
        await query.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            show_alert=True
        )

async def leave_queue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Remove driver from the queue"""
    query = update.callback_query
    driver_id = query.from_user.id
    
    try:
        if not await db.is_driver_in_queue(driver_id):
            await query.answer(
                "‚ùó –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏",
                show_alert=True
            )
            return

        if await db.remove_from_queue(driver_id):
            await query.answer(
                "‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏",
                show_alert=True
            )
            await update_menu_message(query.message, driver_id)
        else:
            await query.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏",
                show_alert=True
            )
    except Exception as e:
        logger.error(f"Error in leave_queue: {e}")
        await query.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            show_alert=True
        )

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show driver's profile"""
    query = update.callback_query
    driver_id = query.from_user.id
    
    try:
        driver = await db.get_driver(driver_id)
        if not driver:
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
            )
            return

        is_in_queue = await db.is_driver_in_queue(driver_id)
        queue_position = await db.get_queue_position(driver_id) if is_in_queue else None
        
        status = f"‚úÖ –í –æ—á–µ—Ä–µ–¥–∏ (–ø–æ–∑–∏—Ü–∏—è: {queue_position})" if is_in_queue else "‚ùå –ù–µ –≤ –æ—á–µ—Ä–µ–¥–∏"
        profile_text = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –≤–æ–¥–∏—Ç–µ–ª—è:\n\n"
            f"–ò–º—è: {driver.name}\n"
            f"–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ: {driver.car_model}\n"
            f"–ì–æ—Å–Ω–æ–º–µ—Ä: {driver.car_number}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}"
        )
        await query.message.reply_text(profile_text)
    except Exception as e:
        logger.error(f"Error in show_profile: {e}")
        await query.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"
        )

# Admin handlers
async def admin_drivers_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show list of all registered drivers"""
    async with db.async_session() as session:
        result = await session.execute(select(Driver))
        drivers = result.scalars().all()
        
        if not drivers:
            await update.callback_query.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø—É—Å—Ç")
            return
            
        drivers_text = "üìã –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π:\n\n"
        for driver in drivers:
            status = "‚úÖ –í –æ—á–µ—Ä–µ–¥–∏" if driver.status == "active" else "‚ùå –ù–µ –≤ –æ—á–µ—Ä–µ–¥–∏"
            drivers_text += (
                f"ID: {driver.telegram_id}\n"
                f"–ò–º—è: {driver.name}\n"
                f"–ê–≤—Ç–æ: {driver.car_model}\n"
                f"–ù–æ–º–µ—Ä: {driver.car_number}\n"
                f"–°—Ç–∞—Ç—É—Å: {status}\n"
                f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {driver.registration_date.strftime('%d.%m.%Y %H:%M')}\n"
                f"{'='*30}\n"
            )
        await update.callback_query.message.reply_text(drivers_text)

async def admin_queue_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show current queue"""
    async with db.async_session() as session:
        result = await session.execute(
            select(Queue).order_by(Queue.position)
        )
        queue_entries = result.scalars().all()
        
        if not queue_entries:
            await update.callback_query.message.reply_text("üë• –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
            return
            
        queue_text = "üë• –¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å:\n\n"
        for entry in queue_entries:
            driver = await db.get_driver(entry.driver.telegram_id)
            queue_text += (
                f"{entry.position}. {driver.name}\n"
                f"   –ê–≤—Ç–æ: {driver.car_model}\n"
                f"   –ù–æ–º–µ—Ä: {driver.car_number}\n"
                f"   –í—Ä–µ–º—è –≤ –æ—á–µ—Ä–µ–¥–∏: {(datetime.utcnow() - entry.join_time).seconds // 60} –º–∏–Ω.\n"
                f"{'='*30}\n"
            )
        await update.callback_query.message.reply_text(queue_text)

async def admin_reset_queue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Reset the queue"""
    async with db.async_session() as session:
        await session.execute(delete(Queue))
        await session.execute(
            update(Driver).values(status='inactive')
        )
        await session.commit()
    await update.callback_query.message.reply_text("‚úÖ –û—á–µ—Ä–µ–¥—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞")

async def admin_delete_driver(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Delete a driver"""
    context.user_data['admin_action'] = 'delete_driver'
    await update.callback_query.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –≤–æ–¥–∏—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:"
    )

async def handle_admin_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle admin input for various actions"""
    action = context.user_data.get('admin_action')
    
    if action == 'delete_driver':
        try:
            driver_id = int(update.message.text)
            async with db.async_session() as session:
                # Remove from queue first
                await db.remove_from_queue(driver_id)
                
                # Delete driver
                driver = await db.get_driver(driver_id)
                if driver:
                    await session.delete(driver)
                    await session.commit()
                    await update.message.reply_text("‚úÖ –í–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                else:
                    await update.message.reply_text("‚ùå –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")
        finally:
            context.user_data.clear()

# Order handling
async def handle_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle new order messages in the group"""
    # Log incoming message
    logger.info(f"Received message in chat {update.message.chat.id}: {update.message.text}")
    
    try:
        group_id = int(GROUP_ID) if GROUP_ID else None
    except ValueError:
        logger.error(f"Invalid GROUP_ID format: {GROUP_ID}")
        return
        
    if not group_id or update.message.chat.id != group_id:
        logger.info(f"Message from wrong chat. Expected {group_id}, got {update.message.chat.id}")
        return

    # Check if message contains order keywords
    order_keywords = ['–∑–∞–∫–∞–∑', '–ø–æ–µ–∑–¥–∫–∞', '–Ω—É–∂–Ω–æ', '—Ç–∞–∫—Å–∏']
    message_text = update.message.text.lower()
    
    if any(keyword in message_text for keyword in order_keywords):
        logger.info("Order keywords found in message")
        
        # Get first driver in queue
        driver = await db.get_first_in_queue()
        
        if not driver:
            logger.info("No available drivers in queue")
            await update.message.reply_text(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π"
            )
            return

        # Send confirmation to group
        await update.message.reply_text("‚úÖ –ü–æ–µ—Ö–∞–ª–∏!")
        logger.info(f"Order confirmation sent to group")

        # Create inline keyboard for driver
        keyboard = [
            [InlineKeyboardButton("üöó –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f"accept_order_{update.message.message_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # Store order info in context before sending message
        order_key = f'order_{update.message.message_id}'
        if not hasattr(context, 'bot_data'):
            context.bot_data = {}
        context.bot_data[order_key] = {
            'driver_id': driver.telegram_id,
            'chat_id': update.message.chat.id,
            'text': update.message.text,
            'original_message_id': update.message.message_id,
            'status': 'pending'
        }
        logger.info(f"Order data stored in context: {context.bot_data[order_key]}")

        try:
            # Send order to driver
            sent_message = await context.bot.send_message(
                chat_id=driver.telegram_id,
                text=(
                    "üö® –ï—Å—Ç—å –∑–∞–∫–∞–∑!\n\n"
                    f"–¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞:\n{update.message.text}\n\n"
                    "–£ –≤–∞—Å –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑!"
                ),
                reply_markup=reply_markup
            )
            logger.info(f"Order sent to driver {driver.telegram_id}")
            
            # Update order info with sent message id
            context.bot_data[order_key]['message_id'] = sent_message.message_id
            
            # Set timer for order expiration
            asyncio.create_task(
                handle_order_timeout(
                    context,
                    update.message.message_id,
                    driver.telegram_id,
                    sent_message.message_id
                )
            )
            logger.info(f"Order timeout task created for order {update.message.message_id}")
            
        except Exception as e:
            logger.error(f"Error sending order to driver: {e}")
            del context.bot_data[order_key]  # Clean up on error
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –≤–æ–¥–∏—Ç–µ–ª—é"
            )
    else:
        logger.debug(f"No order keywords found in message: {message_text}")

async def handle_order_timeout(context: ContextTypes.DEFAULT_TYPE, order_id: int, driver_id: int, message_id: int):
    """Handle order timeout after 30 seconds"""
    logger.info(f"Starting timeout handler for order {order_id}")
    await asyncio.sleep(30)
    
    # Check if order still exists and wasn't accepted
    order_data = context.bot_data.get(f'order_{order_id}')
    if order_data and order_data['driver_id'] == driver_id:
        logger.info(f"Order {order_id} timed out for driver {driver_id}")
        # Remove order data
        del context.bot_data[f'order_{order_id}']
        
        try:
            # Edit message to driver
            await context.bot.edit_message_text(
                chat_id=driver_id,
                message_id=message_id,
                text="‚è∞ –í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ –∏—Å—Ç–µ–∫–ª–æ"
            )
            
            # Send message to group
            await context.bot.send_message(
                chat_id=order_data['chat_id'],
                reply_to_message_id=order_data['original_message_id'],
                text="‚è∞ –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ —É—Å–ø–µ–ª –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑, –∏—â–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ..."
            )
            
            # Pass order to next driver
            driver = await db.get_first_in_queue()
            if driver:
                logger.info(f"Passing order to next driver {driver.telegram_id}")
                keyboard = [
                    [InlineKeyboardButton("üöó –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f"accept_order_{order_id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                sent_message = await context.bot.send_message(
                    chat_id=driver.telegram_id,
                    text=(
                        "üö® –ï—Å—Ç—å –∑–∞–∫–∞–∑!\n\n"
                        f"–¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞:\n{order_data['text']}\n\n"
                        "–£ –≤–∞—Å –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑!"
                    ),
                    reply_markup=reply_markup
                )
                
                # Update order info in context
                context.bot_data[f'order_{order_id}'] = {
                    'driver_id': driver.telegram_id,
                    'message_id': sent_message.message_id,
                    'original_message_id': order_data['original_message_id'],
                    'chat_id': order_data['chat_id'],
                    'text': order_data['text']
                }
                
                # Set new timer
                asyncio.create_task(
                    handle_order_timeout(
                        context,
                        order_id,
                        driver.telegram_id,
                        sent_message.message_id
                    )
                )
            else:
                logger.info("No more drivers available in queue")
                await context.bot.send_message(
                    chat_id=order_data['chat_id'],
                    reply_to_message_id=order_data['original_message_id'],
                    text="‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –±–æ–ª—å—à–µ –Ω–µ—Ç"
                )
                
        except Exception as e:
            logger.error(f"Error handling order timeout: {e}")
    else:
        logger.info(f"Order {order_id} was already accepted or cancelled")

async def accept_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle order acceptance by driver"""
    query = update.callback_query
    order_id = int(query.data.split('_')[-1])
    logger.info(f"Driver {query.from_user.id} attempting to accept order {order_id}")
    
    # Check if order exists in bot_data
    order_key = f'order_{order_id}'
    order_data = context.bot_data.get(order_key)
    
    logger.info(f"Order data from context: {order_data}")
    
    if not order_data or order_data.get('status') != 'pending':
        logger.warning(f"Order {order_id} not found or not pending. Data: {order_data}")
        await query.answer("‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω", show_alert=True)
        return
        
    if order_data['driver_id'] != query.from_user.id:
        logger.warning(f"Wrong driver trying to accept order. Expected {order_data['driver_id']}, got {query.from_user.id}")
        await query.answer("‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥—Ä—É–≥–æ–º—É –≤–æ–¥–∏—Ç–µ–ª—é", show_alert=True)
        return
    
    try:
        # Get driver info
        driver = await db.get_driver(query.from_user.id)
        if not driver:
            logger.error(f"Driver {query.from_user.id} not found in database")
            await query.answer("‚ùå –û—à–∏–±–∫–∞: –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # Remove from queue and update status
        if not await db.remove_from_queue(query.from_user.id):
            logger.error(f"Failed to remove driver {query.from_user.id} from queue")
            await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å", show_alert=True)
            return
        
        # Mark order as accepted
        order_data['status'] = 'accepted'
        
        # Edit message to driver
        await query.edit_message_text(
            f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑!\n\n"
            f"–¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞:\n{order_data['text']}\n\n"
            "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å ¬´–û—Ç–±–∏—Ç—å—Å—è¬ª –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!"
        )
        
        # Send confirmation to group
        await context.bot.send_message(
            chat_id=order_data['chat_id'],
            reply_to_message_id=order_data['original_message_id'],
            text=f"‚úÖ –ó–∞–±–∏—Ä–∞–µ—Ç {driver.car_model} —Å –≥–æ—Å–Ω–æ–º–µ—Ä–æ–º {driver.car_number}"
        )
        
        logger.info(f"Order {order_id} successfully accepted by driver {driver.telegram_id}")
        
    except Exception as e:
        logger.error(f"Error accepting order: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)
    finally:
        # Clean up order data after processing
        if order_data['status'] == 'accepted':
            del context.bot_data[order_key]

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Log Errors caused by Updates."""
    logger.error(f"Update {update} caused error {context.error}")
    try:
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except Exception as e:
        logger.error(f"Error in error handler: {e}")

async def update_menu_message(message, user_id: int):
    """Update existing menu message with new keyboard"""
    reply_markup = await get_main_menu(user_id)
    try:
        await message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Error updating menu: {e}")

async def main():
    """Start the bot"""
    # Initialize database
    await db.init_db()
    logger.info("Database initialized")

    # Create application
    application = Application.builder().token(TOKEN).build()
    logger.info("Application created")

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("admin", admin))
    
    # Add callback query handlers
    application.add_handler(CallbackQueryHandler(register_driver, pattern="^register$"))
    application.add_handler(CallbackQueryHandler(join_queue, pattern="^join_queue$"))
    application.add_handler(CallbackQueryHandler(leave_queue, pattern="^leave_queue$"))
    application.add_handler(CallbackQueryHandler(show_profile, pattern="^profile$"))
    
    # Add admin callback query handlers
    application.add_handler(CallbackQueryHandler(admin_drivers_list, pattern="^admin_drivers_list$"))
    application.add_handler(CallbackQueryHandler(admin_queue_list, pattern="^admin_queue_list$"))
    application.add_handler(CallbackQueryHandler(admin_reset_queue, pattern="^admin_reset_queue$"))
    application.add_handler(CallbackQueryHandler(admin_delete_driver, pattern="^admin_delete_driver$"))
    
    # Add order handlers
    application.add_handler(CallbackQueryHandler(accept_order, pattern="^accept_order_"))
    application.add_handler(MessageHandler(
        filters.TEXT & filters.ChatType.GROUPS,
        handle_order
    ))
    
    # Add message handler for registration process
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE,
        handle_registration_input
    ))

    # Add error handler
    application.add_error_handler(error_handler)

    logger.info("Starting bot...")
    return application

def run_bot():
    """Run the bot."""
    # Set up asyncio policies for Windows
    if os.name == 'nt':
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    try:
        # Create and run event loop
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        # Initialize application
        application = loop.run_until_complete(main())
        
        logger.info("Bot started successfully!")
        logger.info("Press Ctrl+C to stop the bot")
        
        # Start polling
        loop.run_until_complete(
            application.run_polling(
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True
            )
        )
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
        loop.run_until_complete(application.stop())
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        if 'application' in locals():
            loop.run_until_complete(application.stop())
    finally:
        loop.close()
        logger.info("Bot stopped")

if __name__ == '__main__':
    run_bot() 